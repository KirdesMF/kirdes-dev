---
type Props = {
	className?: string;
};
const { className } = Astro.props;
---

<svg class={className} id="bouncing-line-svg" viewBox="0 0 800 400" preserveAspectRatio="none">
  <path
    id="bouncing-line"
    class="fill-none stroke-2 stroke-foreground"
    d="M200,200 Q 400,200 600,200"
  >
  </path>
</svg>

<script>
  import { gsap } from "gsap";

  const svg = document.querySelector("#bouncing-line-svg") as SVGSVGElement;
  const path = svg.querySelector("#bouncing-line") as SVGPathElement;

  let isConnected = false;
  const snapDistance = 30;
  const startY = 200;

  const p0 = { x: 200, y: startY };
  const p1 = { x: 400, y: startY };
  const p2 = { x: 600, y: startY };

  function getSVGCoordinates(svg: SVGSVGElement, event: MouseEvent) {
    const point = svg.createSVGPoint();
    point.x = event.clientX;
    point.y = event.clientY;
    return point.matrixTransform(svg.getScreenCTM()?.inverse());
  }

  function updatePath() {
    const d = `M${p0.x},${p0.y} Q ${p1.x},${p1.y} ${p2.x},${p2.y}`;
    path.setAttribute("d", d);

    if (Math.abs(p1.y - startY) > snapDistance * 2) {
      isConnected = false;
      gsap.to(p1, { duration: 0.75, y: startY, ease: "elastic(1, 0.150)" });
    }
  }

  function onMove(event: MouseEvent) {
    if (!isConnected && event?.target === path) {
      isConnected = true;
      gsap.killTweensOf(p1);
    }

    if (isConnected) {
      const { x, y } = getSVGCoordinates(svg, event);
      p1.y = y * 2 - (p0.y + p2.y) / 2;
    }
  }

  svg.addEventListener("mousemove", onMove);
  gsap.ticker.add(updatePath);
  updatePath();
</script>
